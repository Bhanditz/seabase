describe Seabase::Normalizer do
  let(:transcript) { Transcript.where("name = 'comp10858_c0_seq1'").first }
  let(:id) { transcript.id }
  subject(:normalizer) { Seabase::Normalizer.new(Replicate.all(), [transcript], 
    Transcript.connection.select_rows("SELECT mc.mapping_count, mc.replicate_id, #{id}
    FROM mapping_counts mc
    WHERE mc.transcript_id = #{id}")) }
  let(:table) { normalizer.table }
  
  describe '.new' do
    it 'initializes' do
      expect(normalizer).to be_kind_of Seabase::Normalizer
    end    
  end

  TABLE_RESULT = [
    ["A", 3.251673408523498, 1.8265016341924332, 3.0802734021842766, 0, 0, 3.988371263803957, 2.541132276611159, 0, 5.103740124466199, 5.930937028614011, 4.115024734226858, 6.462667001647147, 5.175367744884557, 5.179980860191441, 6.187543445554098, 7.243561826806572, 12.349462381135552, 10.13765363460761, 12.157332846431288, 14.56673863068866],
    ["B", 0.9915114041213392, 3.2172575145552758, 2.7715105648713774, 6.828580108156384, 2.757199015741097, 0, 0, 1.791483938360927, 0, 0, 0, 4.790067036585612, 5.72831535474243, 5.3859807162651965, 5.467948960304643, 7.599173947920735, 9.091003902757125, 11.464896536554502, 11.223864932206599, 16.224894963150874],
    ["Combined", 2.1215924063224185, 2.5218795743738545, 2.925891983527827, 6.828580108156384, 2.757199015741097, 3.988371263803957, 2.541132276611159, 1.791483938360927, 5.103740124466199, 5.930937028614011, 4.115024734226858, 5.62636701911638, 5.451841549813494, 5.282980788228318, 5.8277462029293705, 7.421367887363654, 10.720233141946338, 10.801275085581056, 11.690598889318943, 15.395816796919767]
  ]

  def my_compare(x, y)
  end
  
  describe '.table' do
    it 'has data' do
      expect(near_enough(table, TABLE_RESULT)).to be_true
    end
  end
end
